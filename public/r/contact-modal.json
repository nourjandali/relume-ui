{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "contact-modal",
  "type": "registry:component",
  "title": "Contact Modal Component",
  "description": "A contact form modal with various input types including text fields, radio buttons, checkboxes, and a textarea.",
  "dependencies": ["@relume_io/relume-ui"],
  "files": [
    {
      "path": "registry/contact-modal/page.tsx",
      "type": "registry:page",
      "target": "app/page.tsx",
      "content": "import { ContactModal } from \"./components/contact-modal\";\n\nexport default async function Page() {\n  return <ContactModal />;\n}\n"
    },
    {
      "path": "registry/contact-modal/components/contact-modal.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport type { ButtonProps } from \"@relume_io/relume-ui\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  RadioGroup,\n  RadioGroupItem,\n  Input,\n  Label,\n  Checkbox,\n  Textarea,\n  Button,\n  Dialog,\n  DialogTrigger,\n  DialogContent,\n  useMediaQuery,\n} from \"@relume_io/relume-ui\";\n\ntype Props = {\n  heading: string;\n  description: string;\n  button: ButtonProps;\n};\n\nexport type ContactModalProps = React.ComponentPropsWithoutRef<\"section\"> &\n  Partial<Props>;\n\nexport const ContactModal = (props: ContactModalProps) => {\n  const { heading, description, button } = {\n    ...ContactModalDefaults,\n    ...props,\n  };\n\n  const [firstNameInput, setFirstNameInput] = useState(\"\");\n  const [lastNameInput, setLastNameInput] = useState(\"\");\n\n  const [emailInput, setEmailInput] = useState(\"\");\n  const [phoneInput, setPhoneInput] = useState(\"\");\n\n  const [selectedItem, setSelectedItem] = useState(\"\");\n  const [selectedRadio, setSelectedRadio] = useState(\"\");\n\n  const [messageInput, setMessageInput] = useState(\"\");\n  const [acceptTerms, setAcceptTerms] = useState<boolean | \"indeterminate\">(false);\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    console.log({\n      firstNameInput,\n      lastNameInput,\n      emailInput,\n      phoneInput,\n      selectedItem,\n      selectedRadio,\n      messageInput,\n      acceptTerms,\n    });\n  };\n\n  const selectItems = [\n    { value: \"first-choice\", label: \"First Choice\" },\n    { value: \"second-choice\", label: \"Second Choice\" },\n    { value: \"third-choice\", label: \"Third Choice\" },\n  ];\n\n  const radioItems = [\n    { value: \"first-choice\", label: \"First choice\" },\n    { value: \"second-choice\", label: \"Second choice\" },\n    { value: \"third-choice\", label: \"Third choice\" },\n    { value: \"fourth-choice\", label: \"Fourth choice\" },\n    { value: \"fifth-choice\", label: \"Fifth choice\" },\n    { value: \"other\", label: \"Other\" },\n  ];\n  const isTablet = useMediaQuery(\"(max-width: 767px)\");\n\n  return (\n    <section id=\"relume\" className=\"px-[5%] py-16 md:py-24 lg:py-28\">\n      <div className=\"container max-w-lg text-center\">\n        <Dialog>\n          <DialogTrigger asChild>\n            <Button>Open modal</Button>\n          </DialogTrigger>\n          <DialogContent\n            closeIconPosition={isTablet ? \"inside\" : \"outside\"}\n            overlayClassName=\"bg-black/25\"\n            className=\"fixed left-1/2 top-1/2 h-screen -translate-x-1/2 -translate-y-1/2 overflow-y-scroll border-t bg-neutral-white px-[5%] pb-28 pt-16 transition ease-in-out data-[state=closed]:duration-700 data-[state=open]:duration-700 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:slide-out-to-bottom data-[state=closed]:slide-out-to-left-1/2 data-[state=open]:slide-in-from-bottom data-[state=open]:slide-in-from-left-1/2 md:h-auto md:max-h-[80vh] md:w-[90%] md:px-12 md:py-16 lg:w-full lg:max-w-lg lg:p-16\"\n          >\n            <div className=\"mb-8 text-center md:mb-10 lg:mb-12\">\n              <h2 className=\"mb-3 text-5xl font-bold md:mb-4 md:text-7xl lg:text-8xl\">\n                {heading}\n              </h2>\n              <p className=\"md:text-md\">{description}</p>\n            </div>\n            <form\n              className=\"grid grid-cols-1 grid-rows-[auto_auto] gap-6\"\n              onSubmit={handleSubmit}\n            >\n              <div className=\"grid grid-cols-2 gap-6\">\n                <div className=\"grid w-full items-center\">\n                  <Label htmlFor=\"firstName\" className=\"mb-2\">\n                    First name\n                  </Label>\n                  <Input\n                    type=\"text\"\n                    id=\"firstName\"\n                    value={firstNameInput}\n                    onChange={(e) => setFirstNameInput(e.target.value)}\n                  />\n                </div>\n\n                <div className=\"grid w-full grid-cols-1 items-center\">\n                  <Label htmlFor=\"lastName\" className=\"mb-2\">\n                    Last name\n                  </Label>\n                  <Input\n                    type=\"text\"\n                    id=\"lastName\"\n                    value={lastNameInput}\n                    onChange={(e) => setLastNameInput(e.target.value)}\n                  />\n                </div>\n              </div>\n              <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2\">\n                <div className=\"grid w-full grid-cols-1 items-center\">\n                  <Label htmlFor=\"email\" className=\"mb-2\">\n                    Email\n                  </Label>\n                  <Input\n                    type=\"email\"\n                    id=\"email\"\n                    value={emailInput}\n                    onChange={(e) => setEmailInput(e.target.value)}\n                  />\n                </div>\n                <div className=\"grid w-full grid-cols-1 items-center\">\n                  <Label htmlFor=\"phone\" className=\"mb-2\">\n                    Phone number\n                  </Label>\n                  <Input\n                    type=\"text\"\n                    id=\"phone\"\n                    value={phoneInput}\n                    onChange={(e) => setPhoneInput(e.target.value)}\n                  />\n                </div>\n              </div>\n              <div className=\"grid w-full grid-cols-1 items-center\">\n                <Label className=\"mb-2\">Choose a topic</Label>\n                <Select onValueChange={setSelectedItem}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select one...\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {selectItems.map((item, index) => (\n                      <SelectItem key={index} value={item.value}>\n                        {item.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"grid w-full grid-cols-1 items-center py-3 md:py-4\">\n                <Label className=\"mb-3 md:mb-4\">\n                  Which best describes you?\n                </Label>\n                <RadioGroup\n                  className=\"grid grid-cols-2 gap-x-6 gap-y-3.5\"\n                  onValueChange={setSelectedRadio}\n                >\n                  {radioItems.map((item, index) => (\n                    <div key={index} className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value={item.value} id={item.value} />\n                      <Label htmlFor={item.value}>{item.label}</Label>\n                    </div>\n                  ))}\n                </RadioGroup>\n              </div>\n              <div className=\"grid w-full grid-cols-1 items-center\">\n                <Label htmlFor=\"message\" className=\"mb-2\">\n                  Message\n                </Label>\n                <Textarea\n                  id=\"message\"\n                  placeholder=\"Type your message...\"\n                  className=\"min-h-[11.25rem] overflow-auto\"\n                  value={messageInput}\n                  onChange={(e) => setMessageInput(e.target.value)}\n                />\n              </div>\n              <div className=\"mb-3 flex items-center space-x-2 text-sm md:mb-4\">\n                <Checkbox\n                  id=\"terms\"\n                  checked={acceptTerms}\n                  onCheckedChange={setAcceptTerms}\n                />\n                <Label htmlFor=\"terms\" className=\"cursor-pointer\">\n                  I accept the{\" \"}\n                  <a className=\"text-link-primary underline\" href=\"#\">\n                    Terms\n                  </a>\n                </Label>\n              </div>\n              <div className=\"text-center\">\n                <Button {...button}>{button.title}</Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </section>\n  );\n};\n\nexport const ContactModalDefaults: Props = {\n  heading: \"Contact us\",\n  description: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\n  button: { title: \"Submit\" },\n};\n\nContactModal.displayName = \"ContactModal\";"
    },
    {
      "path": "registry/contact-modal/hooks/use-media-query.ts",
      "content": "import { useState } from \"react\";\n\nimport { useIsomorphicLayoutEffect } from \"./use-isomorphic-layout-effect\";\n\ntype UseMediaQueryOptions = {\n  defaultValue?: boolean;\n  initializeWithValue?: boolean;\n};\n\nconst IS_SERVER = typeof window === \"undefined\";\n\nexport function useMediaQuery(\n  query: string,\n  {\n    defaultValue = false,\n    initializeWithValue = true,\n  }: UseMediaQueryOptions = {}\n): boolean {\n  const getMatches = (query: string): boolean => {\n    if (IS_SERVER) {\n      return defaultValue;\n    }\n    return window.matchMedia(query).matches;\n  };\n\n  const [matches, setMatches] = useState<boolean>(() => {\n    if (initializeWithValue) {\n      return getMatches(query);\n    }\n    return defaultValue;\n  });\n\n  // Handles the change event of the media query.\n  function handleChange() {\n    setMatches(getMatches(query));\n  }\n\n  useIsomorphicLayoutEffect(() => {\n    const matchMedia = window.matchMedia(query);\n\n    // Triggered at the first client-side load and if query changes\n    handleChange();\n\n    // Use deprecated `addListener` and `removeListener` to support Safari < 14 (#135)\n    if (matchMedia.addListener) {\n      matchMedia.addListener(handleChange);\n    } else {\n      matchMedia.addEventListener(\"change\", handleChange);\n    }\n\n    return () => {\n      if (matchMedia.removeListener) {\n        matchMedia.removeListener(handleChange);\n      } else {\n        matchMedia.removeEventListener(\"change\", handleChange);\n      }\n    };\n  }, [query]);\n\n  return matches;\n}\n",
      "type": "registry:hook"
    },
    {
      "path": "registry/contact-modal/hooks/use-isomorphic-layout-effect.ts",
      "content": "import { useEffect, useLayoutEffect } from \"react\";\n\nexport const useIsomorphicLayoutEffect =\n  typeof window !== \"undefined\" ? useLayoutEffect : useEffect;\n",
      "type": "registry:hook"
    }
  ]
}
